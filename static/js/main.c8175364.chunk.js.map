{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","registerServiceWorker.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","error","SetError","classes","makeStyles","root","width","margin","useStyles","submitTodoHandler","e","preventDefault","text","completed","id","Math","random","console","log","Fragment","onChange","target","value","onSubmit","type","name","className","onClick","Alert","severity","Todo","todo","map","item","filter","e1","TodoList","status","filteredTodos","index","App","useState","setFilterTodos","useEffect","filterHandler","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c8175364.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Alert from \"@material-ui/lab/Alert\";\nconst Form = ({\n  inputText,\n  setInputText,\n  todos,\n  setTodos,\n  setStatus,\n  SetError,\n  error\n}) => {\n  const useStyles = makeStyles(() => ({\n    root: {\n      width: \"50%\",\n      margin: \"0 auto\"\n    }\n  }));\n  const classes = useStyles();\n  const inputTextHandler = (e) => {\n    setInputText(e.target.value);\n  };\n  const submitTodoHandler = (e) => {\n    //when we hit the '+' it refreshes the page ..that is not our requirement thats y we use prevent default\n    e.preventDefault();\n    // if(e.target.value===undefined && e.key==='Enter')\n    // {\n    //     // SetError(true)\n    //     if(inputText.trim()==='')\n    //     {\n    //         console.log('inner if');\n    //         SetError(true)\n    //     }\n\n    // }\n    // else\n    // {\n    //      SetError(false)\n    // setTodos([\n    //     ...todos,{text:inputText,completed:false,id:Math.random()*1000}\n    // ])\n    // console.log('todo value',todos);\n    // setInputText(\"\") //to reset the input text to \"\"\n    // }\n\n    setTodos([\n      ...todos,\n      { text: inputText, completed: false, id: Math.random() * 1000 }\n    ]);\n    console.log(\"todo value\", todos);\n    setInputText(\"\"); //to reset the input text to \"\"\n  };\n  const statusHandler = (e) => {\n    setStatus(e.target.value);\n  };\n  return (\n    <React.Fragment>\n      <form>\n        <input\n          onChange={inputTextHandler}\n          onSubmit={submitTodoHandler}\n          type=\"text\"\n          name=\"to_do_name\"\n          className=\"todo-input\"\n          value={inputText}\n        ></input>\n        <button\n          className=\"todo-button\"\n          type=\"submit\"\n          onClick={submitTodoHandler}\n        >\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <div className=\"select\">\n          <select name=\"todo\" className=\"filter-todo\" onChange={statusHandler}>\n            <option value=\"all\"> All </option>\n            <option value=\"completed\"> completed </option>\n            <option value=\"uncompleted\"> uncompleted </option>\n          </select>\n        </div>\n      </form>\n\n      {error && (\n        <div className={classes.root}>\n          <Alert severity=\"warning\">Enter some details</Alert>\n        </div>\n      )}\n    </React.Fragment>\n  );\n};\nexport default Form;\n","import React from \"react\";\nconst Todo = ({ text, todo, todos, setTodos }) => {\n  //Events\n  const deleteHandler = () => {\n    setTodos(todos.filter((e1) => e1.id !== todo.id));\n  };\n  const completeHnadler = () => {\n    setTodos(\n      todos.map((item) => {\n        //comparing the cone with the clicked on\n        if (item.id === todo.id) {\n          return {\n            ...item,\n            completed: !item.completed\n          };\n        }\n        return item;\n      })\n    );\n  };\n  return (\n    <div className=\"todo\">\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\n        {text}\n      </li>\n      <button className=\"complete-btn\" onClick={completeHnadler}>\n        <i className=\"fas fa-check\"></i>\n      </button>\n      <button className=\"trash-btn\" onClick={deleteHandler}>\n        <i className=\"fas fa-trash\"></i>\n      </button>\n    </div>\n  );\n};\nexport default Todo;\n","import React from \"react\";\nimport Todo from \"./Todo\";\nconst TodoList = ({ todos, setTodos, status, filteredTodos }) => {\n  return (\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\"></ul>\n      {filteredTodos.map((todo, index) => {\n        // if(status==\"uncompleted\" && todo.completed===false)\n        // {\n        //     console.log('inside if');\n        //     console.log(status);\n        //    console.log('--->',todo);\n        // }\n        return (\n          <Todo\n            key={index}\n            text={todo.text}\n            todo={todo}\n            // filteredTodos={filteredTodos}\n            todos={todos}\n            setTodos={setTodos}\n            status={status}\n          />\n        );\n      })}\n    </div>\n  );\n};\nexport default TodoList;\n","import React, { useState, useEffect } from \"react\";\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilterTodos] = useState([]);\n\n  const filterHandler = () => {\n    switch (status) {\n      case \"completed\":\n        setFilterTodos(todos.filter((todo) => todo.completed === true));\n        break;\n      case \"uncompleted\":\n        setFilterTodos(todos.filter((todo) => todo.completed === false));\n        break;\n      default:\n        setFilterTodos(todos);\n        break;\n    }\n  };\n  useEffect(() => {\n    console.log(\"after submit\");\n    filterHandler();\n  }, [todos, status]);\n  return (\n    <React.Fragment>\n      <p className=\"title\">To do list</p>\n\n      <Form\n        inputText={inputText}\n        setInputText={setInputText}\n        todos={todos}\n        setTodos={setTodos}\n        setStatus={setStatus}\n      />\n      <TodoList\n        todos={todos}\n        setTodos={setTodos}\n        status={status}\n        filteredTodos={filteredTodos}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}